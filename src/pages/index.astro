---
// Get environment variables on the server side
const SUPABASE_URL = import.meta.env.PUBLIC_SUPABASE_URL
const SUPABASE_ANON_KEY = import.meta.env.PUBLIC_SUPABASE_ANON_KEY
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JP Paladini - Login</title>
    <meta name="description" content="Personal website and portfolio of JP Paladini" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  
  <body class="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
    <div class="flex items-center justify-center min-h-screen py-2 sm:py-4 lg:py-8 px-4 sm:px-6 lg:px-8">
      <div class="max-w-md w-full space-y-3 sm:space-y-4 lg:space-y-6">
        
        <!-- Logo -->
        <div class="text-center flex-shrink-0">
          <!-- Dynamic logo for light/dark mode -->
          <img 
            src="/jp_black.webp" 
            alt="JP Logo" 
            class="mx-auto h-10 sm:h-12 lg:h-16 w-auto dark:hidden border-0 outline-none" 
            style="border: none; outline: none;"
          />
          <img 
            src="/jp_white.webp" 
            alt="JP Logo" 
            class="mx-auto h-10 sm:h-12 lg:h-16 w-auto hidden dark:block border-0 outline-none" 
            style="border: none; outline: none;"
          />
          <h2 class="mt-3 sm:mt-4 lg:mt-6 text-center text-xl sm:text-2xl lg:text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
            Welcome Back
          </h2>
          <p class="mt-1 sm:mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            Sign in to your account
          </p>
        </div>

        <!-- Authentication Forms -->
        <div class="bg-white dark:bg-gray-800 py-4 sm:py-6 lg:py-8 px-4 sm:px-6 shadow-xl rounded-lg border dark:border-gray-700 flex-shrink">
          
          <!-- Toggle between Sign In and Sign Up -->
          <div class="flex mb-6 bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
            <button 
              id="signinTab" 
              class="flex-1 py-2 px-4 text-sm font-medium rounded-md bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm"
            >
              Sign In
            </button>
            <button 
              id="signupTab" 
              class="flex-1 py-2 px-4 text-sm font-medium rounded-md text-gray-700 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-300"
            >
              Sign Up
            </button>
          </div>

          <!-- Sign In Form -->
          <form id="signinForm" class="space-y-4">
            <div>
              <label for="signin-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Email address
              </label>
              <input 
                id="signin-email" 
                name="email" 
                type="email" 
                required 
                class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Enter your email"
              />
            </div>
            
            <div>
              <label for="signin-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Password
              </label>
              <input 
                id="signin-password" 
                name="password" 
                type="password" 
                required 
                class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Enter your password"
              />
            </div>

            <button 
              type="submit" 
              id="signinButton"
              class="w-full flex justify-center py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
            >
              <span id="signinText">Sign In</span>
              <div id="signinSpinner" class="hidden ml-2">
                <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              </div>
            </button>
          </form>

          <!-- Sign Up Form -->
          <form id="signupForm" class="space-y-4 hidden">
            <div>
              <label for="signup-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Email address
              </label>
              <input 
                id="signup-email" 
                name="email" 
                type="email" 
                required 
                class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Enter your email"
              />
            </div>
            
            <div>
              <label for="signup-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Password
              </label>
              <input 
                id="signup-password" 
                name="password" 
                type="password" 
                required 
                minlength="6"
                class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Create a password (min 6 chars)"
              />
            </div>

            <button 
              type="submit" 
              id="signupButton"
              class="w-full flex justify-center py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
            >
              <span id="signupText">Sign Up</span>
              <div id="signupSpinner" class="hidden ml-2">
                <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              </div>
            </button>
          </form>

          <!-- Divider -->
          <div class="mt-6">
            <div class="relative">
              <div class="absolute inset-0 flex items-center">
                <div class="w-full border-t border-gray-300 dark:border-gray-600"></div>
              </div>
              <div class="relative flex justify-center text-sm">
                <span class="px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">Or continue with</span>
              </div>
            </div>
          </div>

          <!-- Google OAuth Button -->
          <button 
            id="googleButton"
            class="mt-4 w-full flex justify-center items-center py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24">
              <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
              <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            Continue with Google
          </button>

          <!-- GitHub OAuth Button -->
          <button 
            id="githubButton"
            class="mt-3 w-full flex justify-center items-center py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200"
          >
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
            Continue with GitHub
          </button>

          <!-- Error Message -->
          <div id="errorMessage" class="hidden mt-4 p-3 rounded-md bg-red-50 dark:bg-red-900/50 border border-red-200 dark:border-red-800">
            <p class="text-sm text-red-700 dark:text-red-200"></p>
          </div>

          <!-- Success Message -->
          <div id="successMessage" class="hidden mt-4 p-3 rounded-md bg-green-50 dark:bg-green-900/50 border border-green-200 dark:border-green-800">
            <p class="text-sm text-green-700 dark:text-green-200"></p>
          </div>
        </div>

        <!-- Theme Toggle -->
        <div class="text-center">
          <button 
            id="themeToggle"
            class="inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200"
          >
            <span id="themeIcon">🌙</span>
            <span class="ml-2" id="themeText">Dark Mode</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Supabase Client -->
    <script type="module" define:vars={{ SUPABASE_URL, SUPABASE_ANON_KEY }}>
      import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
      
      // Use server-passed variables
      const supabaseUrl = SUPABASE_URL
      const supabaseKey = SUPABASE_ANON_KEY
      
      console.log('Supabase URL:', supabaseUrl ? 'Set' : 'Missing')
      console.log('Supabase Key:', supabaseKey ? 'Set' : 'Missing')
      
      // Initialize Supabase client
      const supabase = createClient(supabaseUrl, supabaseKey)
      
      // DOM Elements
      const signinTab = document.getElementById('signinTab')
      const signupTab = document.getElementById('signupTab')
      const signinForm = document.getElementById('signinForm')
      const signupForm = document.getElementById('signupForm')
      const googleButton = document.getElementById('googleButton')
      const githubButton = document.getElementById('githubButton')
      const themeToggle = document.getElementById('themeToggle')
      const errorMessage = document.getElementById('errorMessage')
      const successMessage = document.getElementById('successMessage')
      
      // Tab switching
      signinTab.addEventListener('click', () => {
        signinTab.className = 'flex-1 py-2 px-4 text-sm font-medium rounded-md bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm'
        signupTab.className = 'flex-1 py-2 px-4 text-sm font-medium rounded-md text-gray-700 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-300'
        signinForm.classList.remove('hidden')
        signupForm.classList.add('hidden')
        hideMessages()
      })
      
      signupTab.addEventListener('click', () => {
        signupTab.className = 'flex-1 py-2 px-4 text-sm font-medium rounded-md bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm'
        signinTab.className = 'flex-1 py-2 px-4 text-sm font-medium rounded-md text-gray-700 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-300'
        signupForm.classList.remove('hidden')
        signinForm.classList.add('hidden')
        hideMessages()
      })
      
      // Form submissions
      signinForm.addEventListener('submit', async (e) => {
        e.preventDefault()
        const email = document.getElementById('signin-email').value
        const password = document.getElementById('signin-password').value
        
        showLoading('signin')
        hideMessages()
        
        try {
          const { data, error } = await supabase.auth.signInWithPassword({
            email,
            password
          })
          
          if (error) throw error
          
          showSuccess('Sign in successful! Redirecting...')
          setTimeout(() => {
            window.location.href = '/dashboard'
          }, 1000)
          
        } catch (error) {
          showError(error.message)
        } finally {
          hideLoading('signin')
        }
      })
      
      signupForm.addEventListener('submit', async (e) => {
        e.preventDefault()
        const email = document.getElementById('signup-email').value
        const password = document.getElementById('signup-password').value
        
        showLoading('signup')
        hideMessages()
        
        try {
          const { data, error } = await supabase.auth.signUp({
            email,
            password
          })
          
          if (error) throw error
          
          showSuccess('Account created successfully! You can now sign in.')
          // Switch to sign in tab
          signinTab.click()
          
        } catch (error) {
          showError(error.message)
        } finally {
          hideLoading('signup')
        }
      })
      
      // Google OAuth
      googleButton.addEventListener('click', async () => {
        try {
          const { data, error } = await supabase.auth.signInWithOAuth({
            provider: 'google',
            options: {
              redirectTo: `${window.location.origin}/dashboard`
            }
          })
          
          if (error) throw error
          
        } catch (error) {
          showError(error.message)
        }
      })
      
      // GitHub OAuth
      githubButton.addEventListener('click', async () => {
        try {
          const { data, error } = await supabase.auth.signInWithOAuth({
            provider: 'github',
            options: {
              redirectTo: `${window.location.origin}/dashboard`
            }
          })
          
          if (error) throw error
          
        } catch (error) {
          showError(error.message)
        }
      })
      
      // Theme toggle
      themeToggle.addEventListener('click', () => {
        const isDark = document.documentElement.classList.contains('dark')
        
        if (isDark) {
          document.documentElement.classList.remove('dark')
          document.getElementById('themeIcon').textContent = '🌙'
          document.getElementById('themeText').textContent = 'Dark Mode'
          localStorage.setItem('theme', 'light')
        } else {
          document.documentElement.classList.add('dark')
          document.getElementById('themeIcon').textContent = '☀️'
          document.getElementById('themeText').textContent = 'Light Mode'
          localStorage.setItem('theme', 'dark')
        }
      })
      
      // Initialize theme
      const savedTheme = localStorage.getItem('theme')
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
      
      if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
        document.documentElement.classList.add('dark')
        document.getElementById('themeIcon').textContent = '☀️'
        document.getElementById('themeText').textContent = 'Light Mode'
      }
      
      // Helper functions
      function showLoading(type) {
        const button = document.getElementById(`${type}Button`)
        const text = document.getElementById(`${type}Text`)
        const spinner = document.getElementById(`${type}Spinner`)
        
        button.disabled = true
        text.textContent = type === 'signin' ? 'Signing In...' : 'Creating Account...'
        spinner.classList.remove('hidden')
      }
      
      function hideLoading(type) {
        const button = document.getElementById(`${type}Button`)
        const text = document.getElementById(`${type}Text`)
        const spinner = document.getElementById(`${type}Spinner`)
        
        button.disabled = false
        text.textContent = type === 'signin' ? 'Sign In' : 'Sign Up'
        spinner.classList.add('hidden')
      }
      
      function showError(message) {
        errorMessage.classList.remove('hidden')
        errorMessage.querySelector('p').textContent = message
      }
      
      function showSuccess(message) {
        successMessage.classList.remove('hidden')
        successMessage.querySelector('p').textContent = message
      }
      
      function hideMessages() {
        errorMessage.classList.add('hidden')
        successMessage.classList.add('hidden')
      }
      
      // Check if user is already authenticated
      supabase.auth.onAuthStateChange((event, session) => {
        if (session) {
          window.location.href = '/dashboard'
        }
      })
    </script>
  </body>
</html>